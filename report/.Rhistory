library("tseries")
install.packages(c("mgcv", "survival"))
install.packages("tseries")
library("tseries")
library()
library(help="tseries")
p = get.hist.quote(instrument = "^gspc", start = "1994-02-11", end = "2009-12-31", quote = "AdjClose". quiet = T)
p = get.hist.quote(instrument = "^gspc", start = "1994-02-11", end = "2009-12-31", quote = "AdjClose", quiet = T)
p
p = get.hist.quote(instrument = "^gspc", start = "1994-02-11", end = "2009-12-31", quote = "AdjClose", quiet = F)
view(p)
ls()
dim(p)
print p
print "p"
print(p)
head(p)
head(p, n=10)
names(p)
y = diff(log(p))
head(y)
log(1)
log(10)
head(diff(p))
log(0.050018)
head(coredata(y))
y = coredata(y)
q()
library(quantmod)
a<-getFinancials("AAPL", src = "yahoo")
a
viewFin(AAPL.f, "CF", "A")   # Annual Cash Flows
a<-viewFin(AAPL.f, "CF", "A")   # Annual Cash Flows
a
View(a)
getFin('AAPL') # returns AAPL.f to "env"
viewFin(AAPL.f, "CF", "A")   # Annual Cash Flows
viewFin(AAPL.f, "CF", "A")
AAPL.f
viewFin(AAPL.f, "CF", "Q")
a<-read.csv("http://finance.yahoo.com/d/quotes.csv?s=XOM+BBDb.TO+JNJ+MSFT&f=snd1l1yr")
a<-read.csv("http://finance.yahoo.com/d/quotes.csv?s=XOM+BBDb.TO+JNJ+MSFT&f=snd1l1yr", header = FALSE)
a
a[2, 5]
class(a)
paste("a", "b")
paste("a", "b", sep="")
viewFin(AAPL.f, "CF", "Q")
viewFin(AAPL.f, "CF", "A")
library(XML)
install.packages("XML")
library(XML)
doc<-htmlTreeParse('https://in.finance.yahoo.com/q/bs?s=INFY.BO&annual')
doc
doc<-htmlParse('https://in.finance.yahoo.com/q/bs?s=INFY.BO&annual')
viewFin(AAPL.f, "CF", "Q")
b<-viewFin(AAPL.f, "CF", "Q")
b
rm(b)
viewFin(AAPL.f, "CF", "Q")
viewFin(AAPL.f, "IS", "Q")
getFin('INFY')
viewFin(INFY.f, "IS", "Q")
viewFin(INFY.f, "IS", "QA")
viewFin(INFY.f, "IS", "A")
a<-viewFin(INFY.f, "IS", "A")
library(quantmod)
getFin('INFY')
rm(list = ls())
a = getFin('INFY')
viewFin(a, "IS", "A")
viewFin("INFY", "IS", "A")
viewFin(INFY, "IS", "A")
viewFin(INFY.f, "IS", "A")
paste("a", "b")
paste("a", "b", sep = "")
a
str(AAPL.f)
str(INFY.f)
viewFin(getFin('INFY'), "IS", "A")
as.name(char[1])
as.name(a[1])
viewFin(as.name(a[1]), "IS", "A")
as.name(a[1])
print(a[1], quote=FALSE)
viewFin(print(a[1], quote=FALSE), "IS", "A")
cat(a[1], "\n")
viewFin(cat(a[1], "\n"), "IS", "A")
a<-INFY.f
viewFin(a, "IS", "A")
as.name(a[1])
a = "INFY.f"
as.name(a[1])
b<-as.name(a[1])
class(INFY.f)
class(a)
class(a)<-"financials"
class(a)
viewFin(a, "IS", "A")
a
as.name(a[1])
viewFin(as.name(a[1]), "IS", "A")
class(a)
viewFin(a, "IS", "A")
view(INFY.f)
a<-viewFin(INFY.f, "IS", "A")
View(a)
View(INFY.f)
parent.frame()
src()
parent.src()
parentls()
$b
sys.frame()
sys.frame(which = "a")
sys.frame(which = a)
ls()
ls(3)
ls()[3]
class(ls()[3])
a = 'INFY.f'
class(a)
a = "INFY.f"
class(a)
tickers<-new.env()
s<-"AAPL"
lapply(s, getFinancials, env=tickers)
sapply(ls(envir=tickers)
,
9
owe
s <- c("AAPL","GOOG","IBM","GS","AMZN","GE")
fin <- lapply(s, getFinancials, auto.assign=FALSE)
names(fin) <- s
class(fin)
class(INFY.f)
lapply(fin, function(x) x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",])
M <- matrix(seq(1,16), 4, 4)
View(M)
x <- list(a = 1, b = 1:3, c = 10:100)
x
rm(list = ls())
tickers<-new.env()
s<-c("INFY")
lapply(s, getFinancials, env=tickers)
ls(env=tickers)
get(ls(env=tickers))
sapply(ls(envir=tickers), function(x){
x <- get(x)
x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",]
})
rm(list = ls())
tickers <-  new.env()
s <- c("AAPL","GOOG")
lapply(s, getFinancials,env=tickers)
sapply(ls(envir=tickers),
function(x) {x <- get(x) ## get the varible name
x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",]})
rm(list = ls())
s <- c("AAPL","GOOG","IBM","GS","AMZN","GE")
fin <- lapply(s, getFinancials, auto.assign=FALSE)
names(fin) <- s
lapply(fin, function(x) x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",])
tick="AMZN"
s <- c(tick)
rm(list = ls())
tick="AMZN"
s <- c(tick)
fin <- lapply(s, getFinancials, auto.assign=FALSE)
names(fin)
names(fin) <- s
fin
lapply(fin, function(x) x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",])
rm(list =  ls())
getFinancials("AMZN")
viewFinancials(AMZN.f, 'BS', 'A')
viewFinancials(AMZN.f, 'IS', 'A')
viewFinancials(AMZN.f, 'IS', 'Q')
AMZN.f$IS$Q
AMZN.f$IS$Q["Operating Income"]
AMZN.f$IS$Q["Operating Income",]
AMZN.f$IS$Q["Operating Income",]/AMZN.f$IS$Q["Total Revenue",]
AMZN.f$IS$Q["Total Revenue",]
AMZN.f$IS$A["Total Revenue",]
getFinancials("INFY")
INFY.f$IS$A["Total Revenue",]
rm(list = ls())
tick="INFY"
s <- c(tick)
fin <- lapply(s, getFinancials, auto.assign=FALSE)
names(fin) <- s
test<-lapply(fin, function(x){
x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",]
})
test
rm(list = ls())
s <- c(tick)
fin <- lapply(s, getFinancials, auto.assign=FALSE)
names(fin) <- s
test_1<-lapply(fin, function(x){
x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",]
})
test_2<-lapply(fin, function(x){
x$IS$A["Total Revenue", ] / x$IS$A["Operating Income",]
})
tick="INFY"
s <- c(tick)
fin <- lapply(s, getFinancials, auto.assign=FALSE)
names(fin) <- s
test_1<-lapply(fin, function(x){
x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",]
})
test_2<-lapply(fin, function(x){
x$IS$A["Total Revenue", ] / x$IS$A["Operating Income",]
})
test_1
test_2
test_1[1]
test_1[1, 1]
test_1[2]
test_1[1][1]
test_1[1][2]
test_1[1][1][1]
as.name(tick)
test_1$INFY
test_1$as.name(tick)
test_1$(as.name(tick))
test_1
fin
as.data.frame(test_1)
a<-as.data.frame(test_1)
as.data.frame(fin)
a
View(a)
q()
#	FILENAME: code.r
#	DESCRIPTION: Code for importing Financial Statement data from Google Finance to R environment
#	AUTHOR: Koustubh Dwivedy
#	START DATE: 19 Dec 2016
rm(list=ls())
##############
# USER SPACE #
##############
# tick: Ticker of stock
tick = "AMZN"
# date_start and date_end is not needed as the code is using whichever latest data is available on Google Finance
# your working directory
dir = "C:/Users/TradingLab15/Desktop/R_project/yahoo_finance_R"
##################
# USER SPACE END #
##################
setwd(dir)
library(quantmod)
s<-c(tick)
fin<-lapply(s, getFinancials, auto.assign=FALSE)
names(fin)<-s
test_1<-lapply(fin, function(x){
x$IS$A["Operating Income", ] / x$IS$A["Total Revenue",]
})
data_test_1<-as.data.frame(test_1)
test_2<-lapply(fin, function(x){
x$IS$A["Total Revenue", ] / x$IS$A["Operating Income",]
})
data_test_2<-as.data.frame(test_2)
# F_ROA
# F_delta_ROA
# F_CFO
# F_Accrual
# F_delta_Margin
# F_delta_Turn
# F_delta_Lever
# F_delta_Liquid
# EQ_Offer
fin
fin$AMZN
viewFinancials(fin, "IS", A)
viewFinancials(fin, "IS", "A")
viewFinancials(fin$AMZN, "IS", "A")
Net Income Before Extra. Items
viewFinancials(fin$AMZN, "BS", "A")
viewFinancials(fin$AMZN, "CF", "A")
q()
# tick: Ticker of stock
tick = "AMZN"
# start date in yyyy-mm-dd format
date_start = "2010-12-31"
# end date in yyyy-mm-dd format
date_end = "2011-06-30"
# your working directory
dir = "C:/Users/TradingLab15/Desktop/R_project/report"
# web source from where to download data ("yahoo" or "google")
web_source = "google"
setwd(dir)
library(PerformanceAnalytics)
library(quantmod)
library(xts)
# The following command gets data from Yahoo Finance (default)
data.CPNY<-getSymbols(tick, from=date_start, to=date_end, auto.assign=FALSE, src = web_source)
View(data.CPNY)
data.CPNY.google<-getSymbols(tick, from=date_start, to=date_end, auto.assign=FALSE, src = "google")
data.CPNY.yahoo<-getSymbols(tick, from=date_start, to=date_end, auto.assign=FALSE, src = "yahoo")
View(data.CPNY.google)
View(data.CPNY.yahoo)
data.INFY.google<-getSymbols("INFY", from=date_start, to=date_end, auto.assign=FALSE, src = "google")
View(data.INFY.google)
data.CPNY.ya
rm(list = ls())
# tick: Ticker of stock
tick = "AMZN"
# start date in yyyy-mm-dd format
date_start = "2010-12-31"
# end date in yyyy-mm-dd format
date_end = "2011-06-30"
# your working directory
dir = "C:/Users/TradingLab15/Desktop/R_project/report"
# web source from where to download data ("yahoo" or "google")
web_source = "google"
setwd(dir)
library(PerformanceAnalytics)
library(quantmod)
library(xts)
# The following command gets data from Yahoo Finance (default)
data.CPNY<-getSymbols(tick, from=date_start, to=date_end, auto.assign=FALSE, src = web_source)
if(web_source == "google"){
data.CPNY$CPNY.Adjusted<-data.CPNY[,4]
}
names(data.CPNY)<-paste(c("CPNY.Open","CPNY.High","CPNY.Low","CPNY.Close","CPNY.Volume","CPNY.Adjusted"))
View(data.CPNY)
rm(list = ls())
q()
